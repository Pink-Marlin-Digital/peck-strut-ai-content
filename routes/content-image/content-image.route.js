import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { OpenAI } from "openai";
import { registerContentImageListRoute } from "./list-content-images.route.js";
import axios from "axios";
import sharp from "sharp";
import { uploadToS3 } from "../../services/s3.service.js";
import crypto from "crypto";
import { renderPromptFromTemplate } from "./renderPromptFromTemplate.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Registers the /content-image route on the provided Fastify instance.
 * @param {import('fastify').FastifyInstance} server - The Fastify server instance.
 */
export function registerContentImageRoute(server) {
  console.info("[registerContentImageRoute] Registering /content-image route");

  server.post("/content-image", {
    schema: {
      summary: "Generate an image from an LLM given a message",
      description:
        "Accepts a message and returns an image generated by the LLM (OpenAI).",
      tags: ["Content"],
      body: {
        type: "object",
        required: ["message"],
        properties: {
          message: {
            type: "string",
            description: "Prompt to generate image from",
          },
          size: {
            type: "string",
            description:
              "Image aspect ratio: 'square' (1024x1024), 'portrait' (1024x1792), or 'landscape' (1792x1024)",
            enum: ["square", "portrait", "landscape"],
            default: "square",
          },
        },
      },
      response: {
        200: {
          type: "object",
          properties: {
            originalUrl: {
              type: "string",
              description: "URL of the original image",
            },
            thumbnailUrl: {
              type: "string",
              description: "URL of the thumbnail image",
            },
            folder: {
              type: "string",
              description: "Folder name for the generated image",
            },
          },
        },
        400: {
          type: "object",
          properties: {
            error: { type: "string" },
          },
        },
        500: {
          type: "object",
          properties: {
            error: { type: "string" },
            details: { type: "string" },
          },
        },
      },
    },
    /**
     * Route handler for POST /content-image
     */
    handler: async (request, reply) => {
      const { message, size = "square", subject, style, lighting, mood, resolution } = request.body;
console.info("[POST /content-image] Received request", { message, size, subject, style, lighting, mood, resolution });
if (!message) {
  console.warn("[POST /content-image] Missing required field: message", { message });
  return reply.code(400).send({ error: "Missing required field: message" });
}
// Use message as subject if subject not provided
const promptValues = {
  subject: subject || message,
  style: style || "Fun cartoonish",
  lighting: lighting || "natural lighting",
  mood: mood || "warm and inviting",
  resolution: resolution || "high resolution"
};
const prompt = renderPromptFromTemplate(promptValues);
      const apiKey = process.env.IMAGE_API_KEY;
      const baseURL = process.env.IMAGE_API_BASE_URL;
      if (!apiKey) {
        console.warn(
          "[POST /content-image] IMAGE_API_KEY not set in environment"
        );
        return reply
          .code(500)
          .send({ error: "OPENAI_API_KEY not set in environment." });
      }
      try {
        // Map user-friendly size to OpenAI-supported size
        const sizeMap = {
          square: "1024x1024",
          portrait: "1024x1792",
          landscape: "1792x1024",
        };
        const openaiSize = sizeMap[size];
        if (!openaiSize) {
          console.warn("[POST /content-image] Invalid size parameter", {
            size,
          });
          return reply.code(400).send({
            error: "Invalid size. Supported: square, portrait, landscape.",
          });
        }
        console.info(
          "[POST /content-image] Sending image generation request to OpenAI",
          { baseURL, openaiSize }
        );
        const openai = new OpenAI({
          apiKey,
        });

        const response = await openai.images.generate({
          prompt,
          n: 1,
          size: openaiSize,
          // detail: "high",
          quality: "hd",
          model: "dall-e-3" || process.env.OPENAI_IMAGE_MODEL || "dall-e-3",
        });

        // Download the image from the URL returned by the LLM
        const url = response.data[0].url;
        const axiosResponse = await axios.get(url, {
          responseType: "arraybuffer",
        });
        const originalBuffer = Buffer.from(axiosResponse.data);

        // Generate a unique folder name for this request
        const folder = `content-image-${Date.now()}-${crypto
          .randomBytes(8)
          .toString("hex")}`;
        const s3Folder = `${folder}/`;
        const bucket = process.env.S3_BUCKET;

        // Save original image as original.png
        const originalKey = `${s3Folder}original.png`;
        const originalUrl = await uploadToS3({
          bucket,
          key: originalKey,
          body: originalBuffer,
          contentType: "image/png",
        });

        // Generate thumbnail using sharp
        const thumbnailBuffer = await sharp(originalBuffer)
          .resize(256, 256, { fit: "inside" })
          .png()
          .toBuffer();
        const thumbnailKey = `${s3Folder}thumbnail.png`;
        const thumbnailUrl = await uploadToS3({
          bucket,
          key: thumbnailKey,
          body: thumbnailBuffer,
          contentType: "image/png",
        });

        return reply.send({
          originalUrl,
          thumbnailUrl,
          folder,
        });
      } catch (err) {
        console.warn("[POST /content-image] Error contacting OpenAI", {
          error: err.message,
        });
        return reply
          .code(500)
          .send({ error: "Failed to contact OpenAI", details: err.message });
      }
    },
  });

  // Register GET /content-image/list
  registerContentImageListRoute(server);
}
