import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { OpenAI } from "openai";
import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";
import crypto from "crypto";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Registers the /content-image route on the provided Fastify instance.
 * @param {import('fastify').FastifyInstance} server - The Fastify server instance.
 */
export function registerContentImageRoute(server) {
  console.info("[registerContentImageRoute] Registering /content-image route");

  server.post("/content-image", {
    schema: {
      summary: "Generate an image from an LLM given a message",
      description:
        "Accepts a message and returns an image generated by the LLM (OpenAI).",
      tags: ["Content"],
      body: {
        type: "object",
        required: ["message"],
        properties: {
          message: {
            type: "string",
            description: "Prompt to generate image from",
          },
          size: {
            type: "string",
            description:
              "Image aspect ratio: 'square' (1024x1024), 'portrait' (1024x1792), or 'landscape' (1792x1024)",
            enum: ["square", "portrait", "landscape"],
            default: "square",
          },
        },
      },
      response: {
        200: {
          type: "object",
          properties: {
            imageUrl: {
              type: "string",
              description: "URL of the generated image",
            },
          },
        },
        400: {
          type: "object",
          properties: {
            error: { type: "string" },
          },
        },
        500: {
          type: "object",
          properties: {
            error: { type: "string" },
            details: { type: "string" },
          },
        },
      },
    },
    /**
     * Route handler for POST /content-image
     */
    handler: async (request, reply) => {
      const { message, size = "square" } = request.body;
      console.info("[POST /content-image] Received request", { message, size });
      if (!message) {
        console.warn("[POST /content-image] Missing required field: message", {
          message,
        });
        return reply
          .code(400)
          .send({ error: "Missing required field: message" });
      }
      const apiKey = process.env.IMAGE_API_KEY;
      const baseURL = process.env.IMAGE_API_BASE_URL;
      if (!apiKey) {
        console.warn(
          "[POST /content-image] IMAGE_API_KEY not set in environment"
        );
        return reply
          .code(500)
          .send({ error: "OPENAI_API_KEY not set in environment." });
      }
      try {
        // Map user-friendly size to OpenAI-supported size
        const sizeMap = {
          square: "1024x1024",
          portrait: "1024x1792",
          landscape: "1792x1024",
        };
        const openaiSize = sizeMap[size];
        if (!openaiSize) {
          console.warn("[POST /content-image] Invalid size parameter", {
            size,
          });
          return reply.code(400).send({
            error: "Invalid size. Supported: square, portrait, landscape.",
          });
        }
        console.info(
          "[POST /content-image] Sending image generation request to OpenAI",
          { baseURL, openaiSize }
        );
        const openai = new OpenAI({
          apiKey,
          organization: "org-WNA4zEtIF2doE60kSS1Od48M",
          project: "proj_9OxDl4T8AdcFKqEeL00ez2K6",
          baseUrl: "https://api.openai.com/v1/images/generations",
        });
        const response = await openai.images.generate({
          prompt: message,
          n: 1,
          size: openaiSize,
          model: process.env.OPENAI_IMAGE_MODEL || "dall-e-3",
        });
        console.log("response", response);
        const image_base64 = response.data[0].b64_json;
        const image_bytes = Buffer.from(image_base64, "base64");

        // S3 upload
        // Check for S3 credentials
        const hasS3Creds =
          process.env.AWS_ACCESS_KEY_ID &&
          process.env.AWS_SECRET_ACCESS_KEY &&
          process.env.AWS_REGION &&
          process.env.S3_BUCKET;
        const filename = `content-image-${Date.now()}-${crypto
          .randomBytes(8)
          .toString("hex")}.png`;
        if (hasS3Creds) {
          const s3 = new S3Client({
            region: process.env.AWS_REGION,
            credentials: {
              accessKeyId: process.env.AWS_ACCESS_KEY_ID,
              secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
            },
          });
          const bucket = process.env.S3_BUCKET;
          try {
            await s3.send(
              new PutObjectCommand({
                Bucket: bucket,
                Key: filename,
                Body: image_bytes,
                ContentType: "image/png",
                ACL: "public-read",
              })
            );
            const s3Url = `https://${bucket}.s3.${process.env.AWS_REGION}.amazonaws.com/${filename}`;
            console.info("[POST /content-image] Image uploaded to S3", {
              s3Url,
            });
            return reply.send({ imageUrl: s3Url });
          } catch (s3err) {
            console.warn("[POST /content-image] Failed to upload to S3", {
              error: s3err.message,
            });
            return reply.code(500).send({
              error: "Failed to upload image to S3",
              details: s3err.message,
            });
          }
        } else {
          // Fallback: save locally
          const localDir = path.join(
            __dirname,
            "../../public/generated-images"
          );
          if (!fs.existsSync(localDir)) {
            fs.mkdirSync(localDir, { recursive: true });
          }
          const localPath = path.join(localDir, filename);
          fs.writeFileSync(localPath, image_bytes);
          const relativeUrl = `/generated-images/${filename}`;
          console.info("[POST /content-image] Image saved locally", {
            relativeUrl,
          });
          return reply.send({ imageUrl: relativeUrl });
        }
      } catch (err) {
        console.warn("[POST /content-image] Error contacting OpenAI", {
          error: err.message,
        });
        return reply
          .code(500)
          .send({ error: "Failed to contact OpenAI", details: err.message });
      }
    },
  });
}
