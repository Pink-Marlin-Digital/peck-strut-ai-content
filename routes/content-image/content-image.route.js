import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { OpenAI } from "openai";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Registers the /content-image route on the provided Fastify instance.
 * @param {import('fastify').FastifyInstance} server - The Fastify server instance.
 */
export function registerContentImageRoute(server) {
  console.info("[registerContentImageRoute] Registering /content-image route");

  server.post("/content-image", {
    schema: {
      summary: "Generate an image from an LLM given a message",
      description:
        "Accepts a message and returns an image generated by the LLM (OpenAI).",
      tags: ["Content"],
      body: {
        type: "object",
        required: ["message"],
        properties: {
          message: {
            type: "string",
            description: "Prompt to generate image from",
          },
          size: {
            type: "string",
            description:
              "Image aspect ratio: 'square' (1024x1024), 'portrait' (1024x1792), or 'landscape' (1792x1024)",
            enum: ["square", "portrait", "landscape"],
            default: "square",
          },
        },
      },
      response: {
        200: {
          type: "object",
          properties: {
            imageUrl: {
              type: "string",
              description: "URL of the generated image",
            },
          },
        },
        400: {
          type: "object",
          properties: {
            error: { type: "string" },
          },
        },
        500: {
          type: "object",
          properties: {
            error: { type: "string" },
            details: { type: "string" },
          },
        },
      },
    },
    /**
     * Route handler for POST /content-image
     */
    handler: async (request, reply) => {
      const { message, size = "square" } = request.body;
      console.info("[POST /content-image] Received request", { message, size });
      if (!message) {
        console.warn("[POST /content-image] Missing required field: message", {
          message,
        });
        return reply
          .code(400)
          .send({ error: "Missing required field: message" });
      }
      const apiKey = process.env.OPENAI_API_KEY;
      const baseURL = process.env.OPENAI_API_BASE_URL;
      if (!apiKey) {
        console.warn(
          "[POST /content-image] OPENAI_API_KEY not set in environment"
        );
        return reply
          .code(500)
          .send({ error: "OPENAI_API_KEY not set in environment." });
      }
      try {
        // Map user-friendly size to OpenAI-supported size
        const sizeMap = {
          square: "1024x1024",
          portrait: "1024x1792",
          landscape: "1792x1024",
        };
        const openaiSize = sizeMap[size];
        if (!openaiSize) {
          console.warn("[POST /content-image] Invalid size parameter", {
            size,
          });
          return reply
            .code(400)
            .send({
              error: "Invalid size. Supported: square, portrait, landscape.",
            });
        }
        console.info(
          "[POST /content-image] Sending image generation request to OpenAI",
          { baseURL, openaiSize }
        );
        const openai = new OpenAI({
          apiKey: process.env.IMAGE_API_KEY,
          //   baseURL,
        });
        const response = await openai.images.generate({
          prompt: message,
          n: 1,
          size: openaiSize,
          model: process.env.OPENAI_IMAGE_MODEL || "dall-e-3",
        });

        const image_base64 = response.data[0].b64_json;
        const image_bytes = Buffer.from(image_base64, "base64");
        fs.writeFileSync("otter.png", image_bytes);
        throw new Error("Image generation failed");
        const imageUrl = response.data[0]?.url;
        if (!imageUrl) {
          console.warn(
            "[POST /content-image] No image URL returned from OpenAI",
            { response }
          );
          return reply
            .code(500)
            .send({ error: "No image URL returned from OpenAI." });
        }
        console.info("[POST /content-image] Image generated", { imageUrl });
        return reply.send({ imageUrl });
      } catch (err) {
        console.warn("[POST /content-image] Error contacting OpenAI", {
          error: err.message,
        });
        return reply
          .code(500)
          .send({ error: "Failed to contact OpenAI", details: err.message });
      }
    },
  });
}
